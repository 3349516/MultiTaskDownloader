/**
 * Copyright (c) www.bugull.com
 */
package com.ldw.downloader.service;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

import android.content.Context;

/**
 * 下载核心控制器
 * @author longdw(longdawei1988@gmail.com)
 *
 * 2014-1-13
 */
public class DownloadControl extends Thread {
	
	private static final int MAX_TASK_COUNT = 100;
	private static final int MAX_DOWNLOAD_THREAD_COUNT = 3;
	
	private Context mContext;
	/** 等待下载的下载队列 */
	private TaskQueue mTaskQueue;
	/** 正在下载的任务 */
	private List<DownloadTask> mDownloadingTasks;
	/** 已经暂停的任务 */
	private List<DownloadTask> mPausedTasks;
	
	public DownloadControl(Context context) {
		mContext = context;
		mTaskQueue = new TaskQueue();
		mDownloadingTasks = new ArrayList<DownloadTask>();
		mPausedTasks = new ArrayList<DownloadTask>();
	}
	
	public void addTask(String url) {
		
	}
	
	public void pauseTask(String url) {
		
	}
	
	public void deleteTask(String url) {
		
	}
	
	public void continueTask(String url) {
		
	}
	
	class TaskQueue {
		
		private Queue<DownloadTask> taskQueue;

		public TaskQueue() {

			taskQueue = new LinkedList<DownloadTask>();
		}

		public void offer(DownloadTask task) {

			taskQueue.offer(task);
		}

		public DownloadTask poll() {
			DownloadTask task = null;
			while (mDownloadingTasks.size() >= MAX_DOWNLOAD_THREAD_COUNT
					|| (task = taskQueue.poll()) == null) {
				try {
					Thread.sleep(1000); // sleep
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
			return task;
		}

		public DownloadTask get(int position) {

			if (position >= size()) {
				return null;
			}
			return ((LinkedList<DownloadTask>) taskQueue).get(position);
		}

		public int size() {

			return taskQueue.size();
		}

		public boolean remove(int position) {

			return taskQueue.remove(get(position));
		}

		public boolean remove(DownloadTask task) {

			return taskQueue.remove(task);
		}
	}

}
